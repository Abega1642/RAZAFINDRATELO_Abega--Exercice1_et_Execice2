Algorithme table_of_truth_and_cannonic_form

Fonction booleanValue(val: booléen) -> entier
    Si val est Faux alors
        Retourner 0
    Sinon
        Retourner 1
    Fin Si
Fin Fonction

Fonction assign_variables(variables: tableau de chaines, values: tableau de booléens) -> dictionnaire
    Retourner {var: val pour var, val dans zip(variables, values)}
Fin Fonction

Fonction valeur_booleenne_fonction_logique(expression_fonction_logique: chaine de caractères, variables: dictionnaire) -> entier
    Pour chaque var, val dans variables faire
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\bnot_{}\b'.format(échapper(var))), 'not {}'.format(var))
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\bnot\s+{}'.format(échapper(var))), 'not {}'.format(var))
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\b{}\b'.format(échapper(var))), str(val))
    Fin Pour
    Retourner booleanValue(eval(expression_fonction_logique))
Fin Fonction

Fonction negation_form(expression: chaine de caractères) -> chaine de caractères
    expression <- séparer(expression, "*")
    expression <- [si longueur(e) == 1 alors "(not {e})" sinon e[longueur(e) - 2] pour chaque e dans expression]
    Retourner joindre(expression, " + ")
Fin Fonction

Fonction first_canonic_form_function(values: tableau de booléens, result: tableau de chaines, variables: tableau de chaines)
    Variables
        expression: tableau de chaines
        value: booléen
        letter: chaine de caractères
    Début
        expression <- tableau Vide
        Pour chaque value, letter dans zip(values, variables) faire
            Si value est égal à 0 alors
                Ajouter "(not {letter})" à expression
            Sinon
                Ajouter letter à expression
            Fin Si
        Fin Pour
        expression_str <- joindre(expression, "*")
        Ajouter expression_str à result
    Fin Fonction

Fonction second_canonic_form_function(values: tableau de booléens, result: tableau de chaines, variables: tableau de chaines)
    Variables
        expression: tableau de chaines
        value: booléen
        letter: chaine de caractères
    Début
        expression <- tableau Vide
        Pour chaque value, letter dans zip(values, variables) faire
            Si value est égal à 0 alors
                Ajouter "(not {letter})" à expression
            Sinon
                Ajouter letter à expression
            Fin Si
        Fin Pour
        expression_str <- joindre(expression, "*")
        expression_str <- negation_form(expression_str)
        expression_str <- "[{expression_str}]"
        Ajouter expression_str à result
    Fin Fonction

Fonction possible_values(variables_number: entier) -> tableau de tableau de booléens
    Retourner produire([1, 0], répéter=variables_number)
Fin Fonction

Fonction table_of_truth()
    Variables
        variables_number: entier
        variables: tableau de chaines
        logical_function_input: chaine de caractères
        first_canonic_form: tableau de chaines
        second_canonic_form: tableau de chaines
        values: tableau de booléens
        lines: chaine de caractères
        boolean_value_of_the_function: entier
        expression: chaine de caractères
        expression_str: chaine de caractères
    Début
        variables_number <- demander_entier("\nCombien de variables votre fonction possède ? → ")
        variables <- tableau Vide
        Pour i de 0 à variables_number - 1 faire
            nom_variable <- demander_chaine("Veuillez entrer le nom de la variable numéro {i+1}: ").supprimer_espaces()
            Ajouter nom_variable à variables
        Fin Pour
        expression_fonction_logique <- demander_chaine("Veuillez entrer votre fonction logique. ('not' ou 'not_' : négation, 'and', 'or')\n\t==> f({joindre(variables, ",")}) = ")
        Ecrire('\n\t==== TABLE DE VERITE ==== \n')
        ligne_un <- joindre(["{i}" pour i dans variables] + [f({joindre(variables, ",")}) = {expression_fonction_logique}'], "  ||  ")  
        Ecrire(ligne_un)
        Ecrire("=" * longueur(ligne_un))
        first_canonic_form <- tableau Vide
        second_canonic_form <- tableau Vide
        Pour chaque valeurs dans possible_values(variables_number) faire
            lignes <- joindre([chaine(value) pour value dans valeurs], "  ||  ")
            boolean_value_of_the_function <- booleanValue(valeur_booleenne_fonction_logique(expression_fonction_logique, assigner_variables(variables, valeurs)))
            Si boolean_value_of_the_function est égal à 1 alors
                first_canonic_form_function(valeurs, first_canonic_form, variables)   
            Sinon
                second_canonic_form_function(valeurs, second_canonic_form, variables)
            Fin Si
            Ecrire("{lignes}  ||         {boolean_value_of_the_function}")
        Fin Pour
        first_canonic_form <- joindre(first_canonic_form, " + ")
        second_canonic_form <- joindre(second_canonic_form, " * ")
        Ecrire(\n"==> La première forme canonique de la fonction logique est : f({joindre(variables, ",")}) = : {first_canonic_form}")
        Ecrire(\n"==> La deuxième forme canonique de la fonction logique est : f({joindre(variables, ",")}) = : {second_canonic_form}\n")

Début
	table_of_truth()
Fin
