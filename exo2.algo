Algorithme karnaugh_table
Fonction booleanValue(val: booléen) -> entier
    Si val est Faux alors
        Retourner 0
    Sinon
        Retourner 1
    Fin Si
Fin Fonction

Fonction assign_variables(variables: tableau de chaînes, values: tableau de booléens) -> dictionnaire
    Retourner {var: val pour var, val dans zip(variables, values)}
Fin Fonction

Fonction negation_form(expression: chaîne de caractères) -> chaîne de caractères
    expression <- séparer(expression, "*")
    expression <- [si longueur(e) == 1 alors "(not {e})" sinon e[longueur(e) - 2] pour chaque e dans expression]
    Retourner joindre(expression, " + ")
Fin Fonction

Fonction code_gray(a: tuple) -> tuple
    a <- a + renverser(a)
    demi_longueur_de_a <- longueur(a) / 2
    a <- tuple(['0' + element pour element dans a[:demi_longueur_de_a]]) + a[demi_longueur_de_a:]
    a <- a[:demi_longueur_de_a] + tuple(['1' + element pour element in a[demi_longueur_de_a:]])
    Retourner a
Fin Fonction

Fonction possible_code_Gray(n: entier) -> tableau de tuples
    single <- ('0', '1')
    Si n est égal à 1 alors
        Retourner single
    Sinon
        result <- code_gray(single)
        Pour chaque i dans la plage(3, n+1) faire
            result <- code_gray(result)
        Fin Pour
    Retourner result
Fin Fonction

Fonction transform_into_tuple(n: entier) -> tableau de tuples
    result <- liste(possible_code_Gray(n))
    Pour chaque i dans la plage(0, longueur(result)) faire
        result[i] <- tuple(entier(e) pour e dans tuple(result[i]))
    Retourner result
Fin Fonction

Fonction possible_values(n: entier, q: entier) -> tableau de tuples
    first <- transform_into_tuple(q)
    result <- tableau Vide
    Pour chaque i dans la plage(0, longueur(first)) faire
        second <- transform_into_tuple(n)
        Pour chaque j dans la plage(0, longueur(second)) faire
            second[j] <- second[j] + first[i]
        Fin Pour
        ajouter [element pour sous_tableau in second pour element in sous_tableau] à result
    Retourner result
Fin Fonction

Fonction logical_function_boolean_value(logical_function_input: chaîne de caractères, variables: dictionnaire) -> entier
    Pour chaque var, val dans variables faire
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\bnot_{}\b'.format(échapper(var))), 'not {}'.format(var))
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\bnot\s+{}'.format(échapper(var))), 'not {}'.format(var))
        expression_fonction_logique <- remplacer(expression_fonction_logique, regex(r'\b{}\b'.format(échapper(var))), str(val))
    Fin Pour
    Retourner booleanValue(eval(expression_fonction_logique))
Fin Fonction

Fonction boolean_value_of_the_LogicalFunction(logical_function_input: chaîne de caractères, variables: dictionnaire, n: entier, q: entier) -> Tableau d'entiers  
    result <- tableau Vide
    Pour chaque valeurs dans possible_values(n, q) faire
        ajouter booleanValue(logical_function_boolean_value(logical_function_input, assign_variables(variables, valeurs))) à result
    Retourner result
Fin Fonction

Fonction k_table_matrix(logical_function: chaîne de caractères, n: entier, q: entier) -> Tableau de Tableau d'entiers
    k_table <- boolean_value_of_the_LogicalFunction(logical_function, n, q)
    subdivisions <- longueur(k_table) / longueur(possible_code_Gray(q))
    k_table <- [k_table[i:i+subdivisions] pour i dans la plage(0, longueur(k_table), subdivisions)]
    Retourner k_table
Fin Fonction

Fonction karnaugh_table()
    Variables
        variables_number: entier
        variables: Tableau de chaines
        logical_function_input: chaine de caractères
        n: entier
        q: entier
        k_table_array: Tableau d'entiers
        letters: chaine de caractères
        letters1: chaine de caractères
        header: chaine de caractères
        underline: chaine de caractères
        subdivisions: entier
        parts: tableau de tableau de chaines
        value: tuple
    Début
        variables_number <- demander_entier("\nCombien de variables votre fonction possède ? → ")
        variables <- tableau Vide
        Pour i dans la plage(0, variables_number) faire
            nom_variable <- demander_chaîne("Veuillez entrer le nom de la variable numéro {i+1}: ").supprimer_espaces()
            ajouter nom_variable à variables
        Fin Pour
        expression_fonction_logique <- demander_chaîne("Veuillez entrer votre fonction logique. ('not' ou 'not_' : négation, 'and', 'or')\n\t==> f({joindre(variables, ",")}) = ")
        
        Si variables_number est égal à 2 alors
            n <- 1
            q <- 1
        Sinon
            n <- demander_entier("Veuillez entrer le nombre de variables dans la ligne horizontale du tableau de Karnaugh : → ")
            q <- variables_number - n
        Fin Si
        
        k_table_array <- boolean_value_of_the_LogicalFunction(expression_fonction_logique, variables, n, q)
        k_table_array <- [chaine(e) pour e dans k_table_array]
        
        letters <- joindre(variables[:n], "")
        letters1 <- joindre(variables[n :variables_number], "")
        header <- joindre([val pour val in possible_code_Gray(n)], " | ")
        underline <- '=' * (longueur(header) + 1)
        
        Afficher(f'{letters}     {header}')
        Afficher(f'{letters1}   || {underline}')
        
        subdivisions <- longueur(k_table_array) / longueur(possible_code_Gray(q))
        parts <- [k_table_array[i:i+subdivisions] pour i dans la plage(0, longueur(k_table_array), subdivisions)]
        
        Pour chaque value, parts dans zip(possible_code_Gray(q), parts) faire
            Afficher("{value}   || {'  |  '.join(parts)}")
        Fin Pour
    Fin Fonction

Début
	karnaugh_table()
Fin
